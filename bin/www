require('dotenv').config();
const Future = require('fluture');
const {bootstrap}  = require('booture');
const { acquire, runHook} = require('fluture-hooks');
var debug = require('debug')('the-real-boilerplate:server');
var http = require('http');

const acquireConfig = (
  Future.attempt (() => ({
    mongodb: { url: process.env.MONGODB_URL },
    env: process.env.ENV,
    port: process.env.PORT,
    apiSecret: process.env.API_SECRET
  }))
);

const acquireMongodb = config => ( 
  Future.node (done => require ('mongodb').MongoClient.connect (config.url, { useNewUrlParser: true, useUnifiedTopology: true, }, done))
);


const acquireApp = config => mongodb => (
  Future.attempt (() => require ('../app').create (config) (mongodb))
);

const bootstrapConfig = {
  name: 'config',
  needs: [],
  bootstrap: () => acquire (acquireConfig),
};

const bootstrapMongodb = {
  name: 'mongodb',
  needs: ['config'],
  bootstrap: ({config}) => acquire (acquireMongodb (config.mongodb)) 
};


const bootstrapApp = {
  name: 'app',
  needs: ['mongodb', 'config'],
  bootstrap: ({ mongodb, config }) => acquire (acquireApp (config) (mongodb)),
};

const servicesHook = bootstrap ([ bootstrapConfig,
                                  bootstrapMongodb,
                                  bootstrapApp ]);

const withServices = runHook (servicesHook);

const program = withServices (({app, config}) => Future ((rej, res) => {
  var port = normalizePort(config.port || '3000');

  app.set('port', port);

  var server = http.createServer(app);
  server.listen(port);
  server.on('error', error => rej ({ error, port }));
  server.on('listening', result => res (server));

  return function onCancel () {
    process.exit(1);
  }
}));

Future.fork (onError) (onListening) (program);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(data) {
  if (!data.error) {
    console.error (data);
    process.exit(1);
  } else {
    const { error, port } = data;
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
